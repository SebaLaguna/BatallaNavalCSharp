using System.Text;

/// <summary>
/// La clase GameBoard representa el tablero de juego para el juego de Batalla Naval.
/// Esta clase es responsable de crear y gestionar el tablero de juego, incluida la ubicaci칩n de los barcos
/// y el seguimiento de los ataques.
/// La clase cumple con el Principio de Responsabilidad 칔nica (SRP) de SOLID, ya que su 칰nica responsabilidad
/// es gestionar el tablero de juego. Esto asegura que la clase tenga una 칰nica raz칩n para cambiar, reduciendo
/// la complejidad del c칩digo y mejorando su mantenibilidad.
/// Tambi칠n sigue el principio GRASP de baja dependencia, ya que no depende de ninguna otra clase.
/// Esto significa que los cambios en otras clases tienen un impacto m칤nimo en esta clase, mejorando
/// la robustez y flexibilidad del c칩digo.
/// Tambi칠n sigue el principio GRASP de alta cohesi칩n, ya que todas sus responsabilidades est치n
/// estrechamente relacionadas con la gesti칩n del tablero de juego. Esto mejora la comprensibilidad y
/// la mantenibilidad del c칩digo.
/// </summary>
public class GameBoard
{
    /// <summary>
    /// Tama침o del tablero de juego.
    /// </summary>
    public int Size; // Tama침o del tablero de juego.

    /// <summary>
    /// Propiedad que representa el tablero de juego. Es una matriz bidimensional de cadenas que representa
    /// el estado actual del tablero.
    /// </summary>
    public string[,] board { get; private set; }

    /// <summary>
    /// Constructor de la clase GameBoard. Inicializa el tablero y lo llena con agua.
    /// </summary>
    /// <param name="Size">Tama침o del tablero de juego.</param>
    /// <exception cref="ArgumentException">Se lanza cuando el tama침o del tablero es menor o igual a cero.</exception>
    public GameBoard(int Size)
    {
        if (Size <= 0)
        {
            // ArgumentException: El tama침o del tablero debe ser mayor que cero.
            throw new ArgumentException("El tama침o del tablero debe ser mayor que cero.");
        }
        // Precondici칩n: El tama침o debe ser mayor que cero para que el tablero sea v치lido.
        this.Size = Size;
        board = new string[Size, Size];
        CreateBoard();
    }

    /// <summary>
    /// M칠todo para crear el tablero. Llena el tablero con agua, representada por el car치cter '游릱'.
    /// Este m칠todo sigue el patr칩n de dise침o de Creaci칩n, ya que se encarga de la creaci칩n del tablero de juego.
    /// </summary>
    private void CreateBoard()
    {
        for (int i = 0; i < Size; i++)
        {
            for (int j = 0; j < Size; j++)
            {
                board[i, j] = "游릱"; // S칤mbolo de agua
            }
        }
    }

    /// <summary>
    /// M칠todo para imprimir el tablero. Muestra el estado actual del tablero en la consola.
    /// </summary>
    /// <returns>Una representaci칩n de cadena del tablero de juego actual.</returns>
    public string PrintBoard()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("   ");
        for (int i = 0; i < Size; i++)
        {
            sb.Append((i + 1).ToString().PadLeft(4) + " ");
        }
        sb.AppendLine();
        for (int i = 0; i < Size; i++)
        {
            sb.Append((i + 1).ToString().PadLeft(4) + " ");
            for (int j = 0; j < Size; j++)
            {
                sb.Append(" " + board[i, j].ToString().PadLeft(2));
            }
            sb.AppendLine();
        }
        return sb.ToString();
    }
}
